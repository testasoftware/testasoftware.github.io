{"componentChunkName":"component---src-pages-blog-markdown-remark-frontmatter-slug-tsx","path":"/blog/2013-01-25-git-branching-workflow-part-1-overview/","result":{"data":{"markdownRemark":{"html":"<p>In this post I'm going to explain the current development model for my team. We use <a href=\"http://www.git-scm.com/\">Git</a> very heavily. I will go over our branching\r\nworkflow with some explanation of the basics, but if you need to learn some more about Git try the book <a href=\"http://www.git-scm.com/book\">Git Pro</a>. It is available as\r\na free ebook and covers everything you'll need to know.<!--more--></p>\n<p><img src=\"./branching-strategy.png\" alt=\"\"></p>\n<h2>From Feature to Production</h2>\n<h3>The Main Branches</h3>\n<p>There are three main branches that we use in our central repository. We'll call that repo 'origin'. Our three main branches are\r\ndevelopment, staging and production.</p>\n<p><strong>The development branch</strong> is used as one point to continually share code across the team. As a general rule code pushed out development\r\nbranch should be code that will actually build and passes our unit tests. If we need to share more experimental code we will pull from\r\neach other. The development branch commits are then occasionally merged into the staging branch when we feel the code is a candidate for\r\nrelease.</p>\n<p><strong>The staging branch</strong> is monitored for changes by our build server. Our build server performs multiple functions including running\r\nour test suite and deploying to the staging environment. Once our tests are green and code has been deployed to the staging\r\nenvironment we are able to perform our user acceptance testing. In addition to commits from the development development branch,\r\nbugfixes can also be merged directly to the staging branch. When a staging release is ready changes on the staging branch are then\r\nmerged into production.</p>\n<p><strong>The production branch</strong> (master) is the branch that reflects what is currently deployed to production. The production branch is\r\nalso monitored for changes by our build server. Assuming our test suite continues to pass, the latest changes are deployed. In the\r\nevent that there is a severe bug that need to be fixed immediately (a hotfix), a temporary hotfix branch can be created off the\r\nproduction branch. Changes in the hotfix branch can then be merged directly into production and then also merged directly into the\r\ndevelopment branch so changes are shared and propagated back through the workflow.</p>\n<p>Note that while these branches comprise a majority of our development processes Git, however, is still a distributed version\r\ncontrol system (DVCS). Having a central repository that we use for development and deployment in no way prevents us from pull\r\nchanges directly from team members and other places.</p>\n<h3>Posts in This Series</h3>\n<p>Part 1: Overview</p>\n<p><a href=\"/blog/2013-02-23-git-branching-workflow-part-2-feature-branches\">Part 2: Feature Branches</a></p>","frontmatter":{"date":"January 25, 2013","slug":"2013-01-25-git-branching-workflow-part-1-overview","title":"Git Branching Workflow - Part 1: Overview","image":"/assets/images/blog/thumbnails/tree-branch.jpg"}}},"pageContext":{"id":"07c95193-db4e-561a-bd3a-84fea71894a9","frontmatter__slug":"2013-01-25-git-branching-workflow-part-1-overview","__params":{"frontmatter__slug":"2013-01-25-git-branching-workflow-part-1-overview"}}},"staticQueryHashes":[]}