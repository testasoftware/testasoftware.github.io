{
    "componentChunkName": "component---src-pages-blog-markdown-remark-frontmatter-slug-tsx",
    "path": "/blog/2013-09-10-recursion-using-c-lambda-expressions/",
    "result": {"data":{"markdownRemark":{"html":"<p>Recursion can sometimes hurt the brain. Here is a clear and concise way to do recursion using C# lambdas and linq.\nLet's start with a common scenario, recursing through a tree. Imagine that we've got a tree of \"Nodes\". <!--more-->For\nour purposes a Node is just a simple class that has an Id and a way to identify its parent Node (via ParentId in this case).</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">// pseudo code for an example tree node</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> Id<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">int</span></span> ParentId<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>Simple enough so far...</p>\n<p>We remember that we need to use recursion to traverse the tree. We could write code that explicitly gets a set\nof child nodes. Then paste that snippet in half-a-dozen times to get all the nested children that branches who knows\nhow far down. Then a user comes along and alters the tree and even more nested children get created. It's back to the\nclipboard to paste in some more of that garbage code.</p>\n<p>No, no, no... We know better... recursion is the correct way to go. For whatever reason recursion hurts the brain and\nyou can never quite seem to remember how to do it correctly. The reason for that? Recursion just doesn't seem to ever\nlend itself to readability. If we can read something clearly we can understand it more easily. Using lambda expressions\nand linq help us get that clarity. Take the example below...</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">// recursion lambda</span>\n<span class=\"token class-name\">Action<span class=\"token punctuation\">&lt;</span>node<span class=\"token punctuation\">></span></span> traverse <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\ntraverse <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>node<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// do something with the node here...</span>\n\n  <span class=\"token comment\">// continue traversing</span>\n  tree<span class=\"token punctuation\">.</span><span class=\"token function\">Where</span><span class=\"token punctuation\">(</span>child <span class=\"token operator\">=></span> child<span class=\"token punctuation\">.</span>ParentId <span class=\"token operator\">==</span> node<span class=\"token punctuation\">.</span>Id<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">.</span><span class=\"token function\">ForEach</span><span class=\"token punctuation\">(</span>traverse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></pre></div>\n<p>The code above is clear and concise. It makes it obvious as to what is going on: get all of the children for a particular\nnode in a tree; for each of the children run the same function to get their children as well; do that over and over until\nwe've traversed the entire tree. Code we can read like this is code we can easily write again. Note that we don't need\nto worry about a stopping condition, because our foreach loop serves in its place.</p>\n<p>Now that we've defined our lambda all that's left to do is run our traversal against whatever root node we would like!</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre style=\"counter-reset: linenumber NaN\" class=\"language-csharp line-numbers\"><code class=\"language-csharp\"><span class=\"token comment\">// run it</span>\n<span class=\"token function\">traverse</span><span class=\"token punctuation\">(</span>tree<span class=\"token punctuation\">.</span>rootNode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code><span aria-hidden=\"true\" class=\"line-numbers-rows\" style=\"white-space: normal; width: auto; left: 0;\"><span></span><span></span></span></pre></div>","frontmatter":{"date":"September 10, 2013","slug":"2013-09-10-recursion-using-c-lambda-expressions","title":"Recursion Using C# Lambda Expressions","image":"/assets/images/blog/thumbnails/fractal.jpg"}}},"pageContext":{"id":"2dc1a90a-4602-5d8b-b257-35e77001a498","frontmatter__slug":"2013-09-10-recursion-using-c-lambda-expressions","__params":{"frontmatter__slug":"2013-09-10-recursion-using-c-lambda-expressions"}}},
    "staticQueryHashes": []}