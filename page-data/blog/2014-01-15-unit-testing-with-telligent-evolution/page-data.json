{"componentChunkName":"component---src-pages-blog-markdown-remark-frontmatter-slug-tsx","path":"/blog/2014-01-15-unit-testing-with-telligent-evolution/","result":{"data":{"markdownRemark":{"html":"<p>Kaboom! <em>The service locator has not been initialized</em>  <!--more--></p>\n<p><img src=\"/assets/images/blog/Telligent/service-locator-error.png\" alt=\"\"></p>\n<p>If you use the Telligent Evolution platform and you've tried to set up unit testing then you've probably seen this message.\r\nSo what's the problem? Well the service locator really isn't anything more than a Ninject kernel. Since our unit tests are\r\nnot operating within the bounds of the Telligent application we need to build and initialize that kernel ourselves. Here are\r\nthe basic steps to set up a Visual Studio Unit Test project to test services that use the Telligent inline PublicApi. Note\r\nthat depending on your tests you may need to tweak things a little bit, but this should get you started.</p>\n<h3>Step 1: Reference the Telligent Evolution DLLs</h3>\n<p>The first step is going to be to reference the DLLs from your Telligent Evolution installation in your unit test project.\r\nThis is a fairly easy step. Just right click your references folder and Add Reference. The simply browse to and\r\nselect the libs you need in your installation's bin directory.</p>\n<p>One item of note, however, is that you will need to make sure that the <em>System.Web.Routing</em> DLL has its\r\n<em>Copy Local</em> property set to <em>true</em>.</p>\n<h3>Step 2: Copy Config and Module Files</h3>\n<p>In this step there are a few files that need to be moved over into the unit test project. First we need to move some\r\nconfig files. The import ones include: <em>caching.config</em>, <em>communityserver.config</em> and\r\n<em>communityserver_override.config</em>. As stated before you may have to move more config files depending on what you\r\nare testing and how you want to set things up. For example, the set up mentioned in this post doesn't explicitly include\r\nplugins or scheduled jobs. Additionally, *connectionstring.config *is not included because I choose to migrate those\r\nsettings to App.config as explained below. These config files can just be placed into the root of the unit test project.</p>\n<p>The other files that have to be moved are all the config files under the <em>Modules</em> directory. The modules directory\r\ncontains the xml configurations that contain the Ninject bindings when we set up our kernel. I usually just put these in a\r\nModules folder in the unit test project. These can be placed anywhere in the project. In order to place them in a different\r\nlocation, however, you'll need to change the path in Step 4.</p>\n<h3>Step 3: Web.config to App.config</h3>\n<p>We are setting up a unit testing project not a web application. So it stands to reason that we will need to migrate some\r\nof the settings that are in the Telligent Web.config over to our test project's App.config. You're not going to want\r\nto move everything over. Some of the pertinent items include: (Note these are just examples. Your actual config may vary)</p>\n<p><strong>a reference to the caching config</strong></p>\n<script src=\"https://gist.github.com/stesta/997b4eda49c5718a7992.js\"></script>\n<p><strong>system.web settings for membership and profile</strong></p>\n<script src=\"https://gist.github.com/stesta/c0d54d082183916abdb9.js\"></script>\n<p><strong>Note:</strong> Additionally, I generally also like to copy connectionstrings.config settings directly into the App.config of my\r\nunit test project. You will probably want to point to a test database anyway.</p>\n<h3>Step 4: Initialize the Kernel</h3>\n<p>This is the magic of initializing the service locator. Now that we have all the references to DLLs, config files and\r\nsettings migrated we can go ahead and build out our Ninject kernel. I It's going to be a slightly different process for\r\nTelligent Evolution 6.x than it is for 7.x, but I'll show you both. In either case I like to set up a base class for my\r\nunit tests that perform the initialization. This way I just don't have to copy and paste initialization code all over\r\nthe place.</p>\n<p><strong>Using(s) Needed</strong></p>\n<script src=\"https://gist.github.com/stesta/28b08353e3718a1e50b5.js\"></script> \n<p><strong>Telligent Evolution 6.x</strong></p>\n<script src=\"https://gist.github.com/stesta/42cca6da12520fd368d1.js\"></script>\n<p><strong>Telligent Evolution 7.x</strong></p>\n<script src=\"https://gist.github.com/stesta/82589e00299d51701f2b.js\"></script>\n<h3>Step 5: Write Your Tests!</h3>\n<p>Now we can go ahead and write our unit tests! As you can see from the example below we're inheriting from our\r\n<em>UnitTestBase</em> class. We can use the Telligent.Common.Services.Get<T>() function to reference Telligent's\r\ninstance of the Ninject kernel that we built and initialized. Additionally, in our unit tests, if we use that function\r\nto get any of our services we have writing it will resolve our constructor injections without the service locator\r\nerror anymore!</p>\n<script src=\"https://gist.github.com/stesta/20c6b87a86df366f2d2e.js\"></script>\n<p>An example of the <em>TestService</em> that uses the Telligent PublicApi.</p>\n<script src=\"https://gist.github.com/stesta/afa738833a63b214fdc6.js\"></script>\n<p>And that's it! Those are the basics of how to set up unit testing with the Telligent PublicApi. Just please bear in mind\r\nthat there is more to consider beyond the simple examples provided. For instance, you can also make sure that your\r\ncustom plugins are loaded or perhaps rebind the email functionality to prevent emails from being sent during testing.\r\nJust make sure to tailor things to your environment.</p>","frontmatter":{"date":"January 15, 2014","slug":"2014-01-15-unit-testing-with-telligent-evolution","title":"Unit Testing with Telligent Evolution","image":"/assets/images/blog/thumbnails/keys.jpg"}}},"pageContext":{"id":"b5e7bfb3-aa16-5d92-b152-e84569aec5f2","frontmatter__slug":"2014-01-15-unit-testing-with-telligent-evolution","__params":{"frontmatter__slug":"2014-01-15-unit-testing-with-telligent-evolution"}}},"staticQueryHashes":[]}